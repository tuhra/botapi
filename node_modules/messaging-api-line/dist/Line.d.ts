import * as LineTypes from './LineTypes';
declare function createText(text: string, options?: LineTypes.MessageOptions & {
    emojis?: LineTypes.Emoji[];
}): LineTypes.TextMessage;
declare function createImage(image: {
    originalContentUrl: string;
    previewImageUrl?: string;
}, options?: LineTypes.MessageOptions): LineTypes.ImageMessage;
declare function createVideo(video: {
    originalContentUrl: string;
    previewImageUrl: string;
}, options?: LineTypes.MessageOptions): LineTypes.VideoMessage;
declare function createAudio(audio: {
    originalContentUrl: string;
    duration: number;
}, options?: LineTypes.MessageOptions): LineTypes.AudioMessage;
declare function createLocation({ title, address, latitude, longitude }: LineTypes.Location, options?: LineTypes.MessageOptions): LineTypes.LocationMessage;
declare function createSticker(sticker: Omit<LineTypes.StickerMessage, 'type'>, options?: LineTypes.MessageOptions): LineTypes.StickerMessage;
declare function createImagemap(altText: string, { baseUrl, baseSize, video, actions, }: Omit<LineTypes.ImagemapMessage, 'type' | 'altText'>, options?: LineTypes.MessageOptions): LineTypes.ImagemapMessage;
declare function createTemplate<T extends LineTypes.Template>(altText: string, template: T, options?: LineTypes.MessageOptions): LineTypes.TemplateMessage<T>;
declare function createButtonTemplate(altText: string, { thumbnailImageUrl, imageAspectRatio, imageSize, imageBackgroundColor, title, text, defaultAction, actions, }: {
    thumbnailImageUrl?: string;
    imageAspectRatio?: 'rectangle' | 'square';
    imageSize?: 'cover' | 'contain';
    imageBackgroundColor?: string;
    title?: string;
    text: string;
    defaultAction?: LineTypes.Action;
    actions: LineTypes.Action[];
}, options?: LineTypes.MessageOptions): LineTypes.TemplateMessage<LineTypes.ButtonsTemplate>;
declare function createConfirmTemplate(altText: string, { text, actions, }: {
    text: string;
    actions: LineTypes.Action[];
}, options?: LineTypes.MessageOptions): LineTypes.TemplateMessage<LineTypes.ConfirmTemplate>;
declare function createCarouselTemplate(altText: string, columns: LineTypes.ColumnObject[], { imageAspectRatio, imageSize, quickReply, }?: {
    imageAspectRatio?: 'rectangle' | 'square';
    imageSize?: 'cover' | 'contain';
    quickReply?: LineTypes.QuickReply;
}): LineTypes.TemplateMessage<LineTypes.CarouselTemplate>;
declare function createImageCarouselTemplate(altText: string, columns: LineTypes.ImageCarouselColumnObject[], options?: LineTypes.MessageOptions): LineTypes.TemplateMessage<LineTypes.ImageCarouselTemplate>;
declare function createFlex(altText: string, contents: LineTypes.FlexContainer, options?: LineTypes.MessageOptions): LineTypes.FlexMessage;
declare const Line: {
    createText: typeof createText;
    createImage: typeof createImage;
    createVideo: typeof createVideo;
    createAudio: typeof createAudio;
    createLocation: typeof createLocation;
    createSticker: typeof createSticker;
    createImagemap: typeof createImagemap;
    createTemplate: typeof createTemplate;
    createButtonsTemplate: typeof createButtonTemplate;
    createButtonTemplate: typeof createButtonTemplate;
    createConfirmTemplate: typeof createConfirmTemplate;
    createCarouselTemplate: typeof createCarouselTemplate;
    createImageCarouselTemplate: typeof createImageCarouselTemplate;
    createFlex: typeof createFlex;
};
export default Line;
//# sourceMappingURL=Line.d.ts.map